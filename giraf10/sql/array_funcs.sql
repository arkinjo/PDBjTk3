CREATE OR REPLACE FUNCTION array_intersect(ANYARRAY,ANYARRAY)
RETURNS ANYARRAY
LANGUAGE SQL
AS $$
SELECT ARRAY(SELECT UNNEST($1) INTERSECT SELECT UNNEST($2))
$$ IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION array_union(ANYARRAY,ANYARRAY)
RETURNS ANYARRAY
LANGUAGE SQL
AS $$
SELECT ARRAY(SELECT UNNEST($1) UNION SELECT UNNEST($2))
$$ IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION array_tanimoto(ANYARRAY,ANYARRAY)
RETURNS FLOAT
LANGUAGE SQL
AS $$
SELECT COALESCE(100.0 * ARRAY_LENGTH(array_intersect($1,$2),1) / ARRAY_LENGTH(array_union($1,$2), 1), 0.0) :: FLOAT
$$ IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION array_order(ANYARRAY)
RETURNS ANYARRAY
LANGUAGE SQL
AS $$
SELECT ARRAY_AGG(a) FROM (SELECT DISTINCT UNNEST($1) AS a ORDER BY a) t
$$ IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION array_count_intersect(ANYARRAY,ANYARRAY)
RETURNS BIGINT
LANGUAGE SQL
AS $$
SELECT COUNT(*) FROM (SELECT UNNEST($1) INTERSECT SELECT UNNEST($2)) t
$$ IMMUTABLE STRICT;

/* array_gi_score is slow. Use array_count_intersect and LEAST functions. */
CREATE OR REPLACE FUNCTION array_gi_score(ANYARRAY,ANYARRAY)
RETURNS FLOAT
LANGUAGE SQL
AS $$
SELECT 100.0 * array_count_intersect($1,$2) / 
    LEAST(ARRAY_LENGTH($1, 1),ARRAY_LENGTH($2,1)) :: FLOAT
$$ IMMUTABLE STRICT;
